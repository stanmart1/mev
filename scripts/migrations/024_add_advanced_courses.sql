-- Add 7 new advanced modules
INSERT INTO learning_modules (slug, category, title, description, difficulty, estimated_time, prerequisites, order_index) VALUES
('advanced-mev-strategies', 'advanced', 'Advanced MEV Strategies', 'Master sophisticated MEV extraction techniques including multi-hop arbitrage, JIT liquidity, and statistical arbitrage', 'advanced', 90, '["arbitrage-strategies", "bundle-construction"]'::jsonb, 8),
('smart-contract-development', 'advanced', 'Smart Contract Development for MEV', 'Learn to build MEV-aware smart contracts and custom programs on Solana', 'advanced', 120, '["understanding-jito", "bundle-construction"]'::jsonb, 9),
('bot-optimization', 'advanced', 'Bot Optimization Techniques', 'Optimize MEV bots for speed, reliability, and profitability', 'advanced', 75, '["arbitrage-strategies", "liquidation-hunting"]'::jsonb, 10),
('market-making-strategies', 'advanced', 'Market Making Strategies', 'Professional market making techniques and liquidity provision strategies', 'advanced', 100, '["arbitrage-strategies", "risk-management"]'::jsonb, 11),
('cross-chain-mev', 'expert', 'Cross-Chain MEV', 'Extract MEV across multiple blockchains and bridges', 'expert', 110, '["advanced-mev-strategies", "smart-contract-development"]'::jsonb, 12),
('mev-protection', 'advanced', 'MEV Protection Techniques', 'Protect users and protocols from MEV extraction', 'advanced', 85, '["understanding-jito", "advanced-mev-strategies"]'::jsonb, 13),
('regulatory-compliance', 'intermediate', 'Regulatory Considerations', 'Navigate legal and compliance requirements for MEV operations', 'intermediate', 60, '["what-is-mev"]'::jsonb, 14);

-- Add content
INSERT INTO module_content (module_id, section_order, section_type, title, content) VALUES
((SELECT id FROM learning_modules WHERE slug = 'advanced-mev-strategies'), 1, 'text', 'Multi-Hop Arbitrage', '{"text": "Multi-hop arbitrage: trades across 3+ DEXs. Path finding, gas modeling, slippage calculation, atomic execution.", "code": "const findPath = async (token, minProfit) => { const paths = []; for (const dex1 of dexes) { for (const dex2 of dexes) { const path = await simulatePath(token, [dex1, dex2]); if (path.profit > minProfit) paths.push(path); } } return paths.sort((a, b) => b.profit - a.profit)[0]; };"}'::jsonb),
((SELECT id FROM learning_modules WHERE slug = 'smart-contract-development'), 1, 'text', 'Solana Programs', '{"text": "Rust programs compiled to BPF. Entrypoint, accounts, instructions, PDAs.", "code": "use solana_program::*; entrypoint!(process_instruction); fn process_instruction(program_id: &Pubkey, accounts: &[AccountInfo], data: &[u8]) -> ProgramResult { Ok(()) }"}'::jsonb),
((SELECT id FROM learning_modules WHERE slug = 'bot-optimization'), 1, 'text', 'Latency Optimization', '{"text": "Target <50ms. Co-locate servers, WebSocket, connection pooling, pre-sign transactions.", "code": "class FastSubmitter { constructor() { this.connections = Array(10).fill(null).map(() => new Connection(RPC_URL)); } async submitFast(opp) { const tx = await this.buildTx(opp); return Promise.race(this.connections.map(c => c.sendTransaction(tx))); } }"}'::jsonb),
((SELECT id FROM learning_modules WHERE slug = 'market-making-strategies'), 1, 'text', 'Spread Management', '{"text": "Profit from bid-ask spread. Metrics: spread width, inventory, volume, volatility.", "code": "class MarketMaker { calculateSpread(vol, volume) { const base = 0.001; return base * (1 + vol * 0.5) * (1 + Math.max(0, 1 - volume / 1000000)); } }"}'::jsonb),
((SELECT id FROM learning_modules WHERE slug = 'cross-chain-mev'), 1, 'text', 'Cross-Chain Arbitrage', '{"text": "Price differences across chains. Solana-Ethereum, BSC, Polygon. Bridges: Wormhole, Allbridge. Risks: delays, fees.", "code": "const detect = async () => { const solPrice = await getSolanaPrice(); const ethPrice = await getEthPrice(); const diff = Math.abs(solPrice - ethPrice) / solPrice; if (diff > 0.003) return { profitable: true, profit: diff - 0.001 }; };"}'::jsonb),
((SELECT id FROM learning_modules WHERE slug = 'mev-protection'), 1, 'text', 'Private Transactions', '{"text": "Jito protection: no front-running, no sandwich, guaranteed order, MEV kickback.", "code": "const submitPrivate = async (tx) => { const bundle = { jsonrpc: \"2.0\", id: 1, method: \"sendBundle\", params: [[tx.serialize()]] }; return fetch(\"https://mainnet.block-engine.jito.wtf\", { method: \"POST\", body: JSON.stringify(bundle) }); };"}'::jsonb),
((SELECT id FROM learning_modules WHERE slug = 'regulatory-compliance'), 1, 'text', 'Legal & Tax', '{"text": "MEV profits are taxable income. US: Schedule C, quarterly taxes. Track transactions, profit/loss, gas costs. Consult legal counsel.", "code": "class TaxTracker { constructor() { this.trades = []; } recordTrade(t) { this.trades.push({ date: new Date(), profit: t.profit, gasCost: t.gasCost }); } generateReport(year) { const trades = this.trades.filter(t => t.date.getFullYear() === year); return { totalProfit: sum(trades.map(t => t.profit)), totalGas: sum(trades.map(t => t.gasCost)) }; } }"}'::jsonb);
